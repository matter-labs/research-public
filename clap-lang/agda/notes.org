
* DONE use integers
* DONE GoodCircuit predicate
    - checks for inclusions and shadows
* DONE Evaluation under GoodCircuit assumption
* DONE Implement tricky functions:
    - assert: isBool, isZero
    - oracles: minus, division

assert_not_zero l r ⇒ l ≠ 0
l ≠ 0  <=>  ∃ r ≠ 0 : l * r - 1 = 0
l = 0 ∧ r = 0 =>  0 = 1 FALSE
l = 0 ∧ r = 1 =>  0 = 1 FALSE
l ≠ 0 ∧ r = 0 =>  0 = 1 FALSE, HAS TO BE TRUE
l ≠ 0 ∧ r ≠ 0           HAS TO BE TRUE
   - r = inv l => l*r = 1 = 1 = 1  TRUE
   - r ≠ inv l => l*r ≠ 1
              => l*r - 1 = 0      FALSE

is_zero l =
  create boolean b
  create scalar r
  assert_not_zero r
  b = l*r -1
  return b

l = 0 ∧ r ≠ 0 => b = 1
l ≠ 0 ∧ r ≠ 0 => b = 1 - lr
l ≠ 0 ∧ r = 1/l => b = 0

* DONE Trace generation
* DONE Constraint systems

 plonk -1 * l + 0 * r + 0 * o + 1 * l * r + 0 = 0 [ l = r in this case)
 x^2 - x = 0
** arrange variables into columns
https://www.notion.so/matterlabs/STARKS-with-boojum-ddf78625a68a4c59967347487df56dcd
do at the constraint generation time
*** copy contraints

*** non copy constraint example
A gate computing Y = X^5 without degree-5 identities.

Z * X^2 - Y,
X^3 - Z

if a custom gate spans more than one row, you don't need to copy constraint its internal wires.

Also for gates of one row like assert_zero, the inverse is not reused

*** public inputs

treated specially because they are shared with the verifier, so also increase verifier cost.

- In halo2 they have a specific column called "instance"
- plonky2 they have a specific column with only 4 elements, which are the result of their hash function, which takes all the public inputs and then they check it in circuit. I don't understand Section 3.5 of plonky2 https://github.com/0xPolygonZero/plonky2/blob/main/plonky2/plonky2.pdf

** lookukps
tables don't compose the same way as gates, they add a whole new column(s)
** More base cases?
    - Halo2: Selector, Fixed, Advice, Instance, Scaled
    - Can these be added modularly?

* TODO overall design
Layered approach:
1/ Constraint systems
    - description of admissible shape of constraints
    - Trace satisfiability

2/ Circuits
   - description of a circuit: base cases + composition combinators
   - conversion to CS
   - Trace generation

3/ Rust eDSL
    - implements state-monad (explicit state passing?)
    - uses Rust variables for safe typing
    - extractable to theorem prover for formal properties
(4/) Monad in functional language
    - for small components of critical importance (e.g., ecAdd)
5/ Optimizations
   - circuit based optimization
   - CS-Trace transformers

* TODO Convince ourselves that language is expressive enough for real use cases (e.g., if-then-else)
** circuit language
** one circuit vs. many circuits

Many Circuit: List (Circuit × List Var)
One Circuit:   (Circuit, inputs,...)
   - "ploMpiler"

(var x y; add x y z) ; (var w; suc)

(x,m) = circ1(a,m)
(y,m) = circ2(b,m)
return ((x,y),m)

-- many circuit
-- one circuit

In Circuits language: (var x `par` var y) ; add y x

in eDSL
  let (x, m) = input_var(m) in   ======> "var #fresh (==0)"
    x = Var ... 0
  let (y, m) = input_var(m) in ==> m_circ  (== var 0) `par` var #fresh (==1)
    y = Var ... 1
   add(y,x,m)

runState m (a;b)
 = runState ((var 0 `par` var 1) `seq` add 0 1) (a;b)
 = [(0,a); (1,b); (2, a + b)]

x ; add





F(flag:  boolean)
 (x,m) = circ1(a,m)
(y,m) = circ2(b,m)
  if (flag) = {
   return (x,m)
  }else{
    reutnr (y,m)
  }

VS.

F'(flag:  boolean)
  if (flag) = {
   (x,m) = circ1(a,m)
   return (x,m)
  }else{
  (y,m) = circ2(b,m)
    reutnr (y,m)
  }

** if-then-else
#+BEGIN_SRC
condition    = circ1(a,b,c);  -- repr bool
trueBranch   = circ2 (d,e,f); -- repr a
falseBranch  = circ3(g,h,q);  -- repr a



result        = (condition) * trueBranch
                  + (1-condition) * falseBranch
#+END_SRC

~Claim ~:~ Above is honest if-then-else computation only if for cases when circ2 and circ3 do not diverge.
~Claim 2:~ If circ2 or circ3 diverge then result will be computed only non of the branches diverged irrespectively
of value of the condition.

How to encode actual =if-then-else=:


#+BEGIN_SRC
if-then-else : Circuit bool -> Circuit Z -> Circuit Z -> Circuit Z
if-then-else cond trueBranch falseBranch = trueBranch' ; falseBranch ; add ...
   where
    trueBranch'   = Multiply all leaves in trueBranch by cond
    falseBranch'  = Multiply all leaves in falseBranch by (1-cond)
#+END_SRC

Exapmle:
#+BEGIN_SRC
eq0 x
    ==>
      var y = x * cond (or 1-cond)
      eq0 y
#+END_SRC

Claim 3: Function if-then-else is honest representation of if-then-else ONLY in case when the only source of divergence in our
circuits is the "eq0" gate.


Claim 4: If Oracles can fails then the above is not honest representation of conditional.

========================
Possible designs
1/ Oracles should not diverge

  orc : {n m  : ℕ}
     → (outs : Names)
     → (f : List ℤ → Vec ℤ m)
     → Circuit (m + n)   -- c
     → Circuit n
In this case inversion is partially correct
  inv' (suc x) = inv (suc x)
  inv' 0 = 0   ---------------- PROOF OBLIGATION AT THE PLACE OF USE (e.g, assert_non_zero)

  [ eq0 l ]
      l = 0 ==> GOOD
      l <> 0 ==> EXPLODE

  [ assert_non_zero l ]
      l = 0 ==> EXPLODE
      l <> 0 ==> GOOD

Question: can we have non-divergent oracles?
orc f => f 0 <> none

** nondeterministic traces

=Example 1:=
#+BEGIN_SRC
prog1 := var x; const 5 ; const 6;  y = 5 + 6; return x + y;
#+END_SRC

#+BEGIN_SRC
trace := [x ; 5 ; 6 ; 11; x + 11]

cs    := #1 = 5
          #2 = 6
          #3 = #1 + #2
          #4 = #3 + #0
#+END_SRC
Given ~cs~ and ~#0~ the satisfiability is uniquely determined.

=Example 2:=
Consider adding a new primitive gate ~add11 2 Name~ with two inputs and one output

#+BEGIN_SRC
trace := [x;5;6;x+5+6]
cs :=
  #1 + #2 = 11
; #3 = #0 + #1 + #2
#+END_SRC

Note, ~cs~ is non-deterministic:

a)  [x;5;6;x+5+6]
b)  [x;6;5;x+5+6]

both a) and b) give satisfiable assignments for ~cs~

However, the constraint system is deterministic with respect its input
~#0~ and outputs ~#3~.

=Claim 1=: genCS, satCS, genTrace produce deterministic traces iff base
gates are deterministic

=Claim 2=: there must be a clear distinction between input, output, and
~intermidiate~ variables in the trace to state soundness.

** custom gates

#+BEGIN_SRC
data Circuit where
  ...
  poseidon : Inputs -> Outputs -> Circuit n
#+END_SRC
Here, ~poseidon~ is a base-case which DOES NOT have details of its implementation.

Notice this gate has n-inputs, one outputs. However, it might happen any (implementation dependent number of intermidiate variables)
We don't want to see implementation details in the "base case constructor"

genCS    (poseidon n names) = [????] -- introduces X trace variables
genTrace (poseidon n name) i  = [????] -- list of scalars corresponding to the CS

=Claim=: Trace variables and Circuit variables should not be identified.

** Circuit language and variable naming

Questions:
- Do we allow "complicated" custom gates (=base cases=) like "poseidon", "ecAdd", etc. in the expression language being
implementation independent?
#+BEGIN_SRC
data Circuit where
  ...
  poseidon : Inputs -> Outputs -> Circuit n
#+END_SRC

- Claim: Disallowing "complicated" custom gates implies that ~Circuit~ expression language is not needed.

a) Relative names results in ~genCS~ with shifting:

#+BEGIN_SRC
genCS (add o)     = "#0 + #1 == #2"
genCS (poseidon inputs outputs) = X, where
genCS (c1 `seq` c2 <inputs>) = genCS c1 ++ adjust c1 inputs (genCS2 c2)
#+END_SRC

Advantages:
- independent of how they are constructed
- trivially allow new base-cases of arbitrary complexity


b) Globally unique names results in trivial ~genCS~ being essentially concatenation:

The following is correct only if there are no "big" base-cases
#+BEGIN_SRC
genCS (add x y z)       = x + y = z
genCS (c1 `seq` c2)     = genCS c1 ++ genCS c2
#+END_SRC

For big cases we must change the definition to be "monadic"
#+BEGIN_SRC
genCS cs (add x y z)       = (#x + #y = (lenTrace cs)) :: cs
genCS cs (c1 `seq` c2)     = let cs' = genCS cs c1 in genCS cs' c2
#+END_SRC


Let us add posieidon:
#+BEGIN_SRC
genCS cs (poseidon inputs output)       = #i..#i+j -- input vars
                                          #o     -- output var
                                          #i...o -- intermidiate vars
#+END_SRC

** Oracles

  orc : {n m  : ℕ}
     → (outs : Names)
     → (f : List ℤ → Maybe (Vec ℤ m))
     → (c : Circuit (m + n))
     → (bomb : Circuit m)
     → Circuit n


- WEAK safety:   if bomb does not blow-up with supposedly-output of f then c would compute the same
            result as it would compute with the actual output of f
- STRONG safety: if bomb does not blow-up the  supposedly-output of f is ACTUALLY output of f

note that WEAK is c dependent while STRONG is c independent

Example: z := isZero(x)
  definition:
  x z
  0 1
  1 0

  implementation:
  x y z
  0 0 1 +
  0 1 1 - WEAK DON'T BLOW-UP [FINE because output is correct anyway] /  STRONG BLOW-UP because y = 0 and has to be 0
  1 0 0 - BLOWS-UP in both WEAK and STRONG cases (because output is wrong)
  1 1 0 +

** parallel computation
*** Dynamic DAG
*** Static
How things look in Rust:
#+BEGIN_SRC
// par : Circuit -> (Env -> Var * Env) -> (Env -> Var * Env) -> (Var * Var) * Env
(res, env) = par env
              (λ env ⇒ prog₁(env, variables))
              (λ env ⇒ prog₂(env, variables))
#+END_SRC

How things are implemented
#+BEGIN_SRC
par (next, state) c1 c2 =

  let (v1, next', state')   = c1 (next, state) in
  let (v2, next'',state'' ) = c2 (next', state) in
     (v1, v2, next'', join state' state'')
#+END_SRC


** optimizations
*** Circuit and trace/cs optimizations
#+BEGIN_SRC
-- source optimization
optimizaExpr : Circuit -> Circuit

-- trace/cs optimization
optmizeCS : CS -> CS
optimizaTrace : Trace -> Trace
#+END_SRC

*** Need to understand
#+BEGIN_SRC
genCS : Circuit -> CS

genBlob  : Circuit -> Circuit2
genTrace : Circuit2 -> input -> trace

optimizeCS : Circuit2 -> (input -> trace)
#+END_SRC

Difference between Circuit and Circuit2
  Circuit is generic
  Circuit2 is specific to CS

** plonk arithmetization
-- vanilla : (ql * l) + (qr * r) + (qm * l * r) + (qo * c) + qc = 0
-- inputs : l(eft) and r(ight) and output is c -- variables
-- ql qr qo : constant
-- qc : constant
-- qm : constant (allows to do multiplication)
-- can add more gadgets

* TODO Express properties which connect constraint systems, digital circuits, and traces
** completeness (aka correctness)

genCS (c1 `seq` c2) = genCS c1 ++ adjust (genCS c2)
satCS (cs1 ++ cs2) trace = satCS cs1 trace /\ satCS cs2 trace
satCS (genCS c) trace = satCS (genCS c) (take (traceLen c) trace)



completeness : (c: Circuit k) -> (i : Input) -> satCS (genCS c) (genTrace c i) = true
-- base cases --

completeness (c1 `seq` c2) i =
  ih1 : satCS (genCS c1) (genTrace c1 i) = true
  ih2 : forall i, satCS (genCS c2) (genTrace c2 i) = true

  satCS (genCS (c1 `seq` c2)) (genTrace (c1 `seq` c2) i)
    =   satCS (genCS c1 + + adjust (genCS c2)) ((genTrace c1 i) + + (genTrace c2 (outputs)))
    =  satCS (genCS c1) (genTrace c1 i) /\
       satCS (adjust (ouputputs) (genCS c2)) (genTrace' (c1 `seq` c2) i)

  satCS (genCS c1) (genTrace c1 i) = true -- by IH

  satCS (adjust (ouputputs) (genCS c2)) (genTrace' (c1 `seq` c2) i)
    = satCS (substInpVar outputs (shiftVars (genCS c2)) (genTrace' (c1 `seq` c2) i)
    = satCS (substInpVar outputs (shiftVars (genCS c2)) (genTrace' c1 i) + + (genTrace' c2 outputs)
    = satCS (shiftVars (genCS c2)) (genTrace' c1 i) + + (genTrace c2 outputs)
    = satCS  (genCS c2) (genTrace c2 outputs)  -- by IH








** soundness (aka safety)
* TODO Implement state monad in Agda for Circuits
* TODO Rust eDSL
- best idea so far is the explicit state-monad.. Rust resource control might help
* TODO Proofs

genTrace : Circuit -> Input -> Trace -- slow and ineff
genCS    : Circuit -> EquationSystem
satCS    : EquationSystem -> Trace -> Bool

Correctness:
forall circuit input trace, trace ≡ genTrace circuit input
                            ⇒ satCS (genCS circuit) trace ≡ true
Safety:
forall circuit trace input,
   satCS (genCS cicruit) trace ≡ true
       ⇒ inputsOf trace ≡ input
       ⇒ outputsOf (genTrace circuit input) ≡ outputsOf trace

Adding new base cases:
  Provide:
     patch_cs : EquationSystem
     patch_solver : Input -> Trace
     patch_Safety   [manually or whatever]
     patch_Correctness [manually or whatever]
  Results: compositional equivalence for freeca
* TODO Celebrate 🍾
